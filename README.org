#+title: ~fishql~ - Fish History Query Language DB

*NOTE: this is still experimental.  It may burn down all you hold dear.*

* Overview

~fishql~ is a ~fish~ shell plugin to hold history in an Sqlite3 DB file.

~fishql~ is a derivative of [[https://github.com/brettviren/shist][shist]] which is a derivative of [[https://github.com/barabo/advanced-shell-history][ash]].  As such the ~fishql~ DB schema is compatible.  Because of the all the useful facilities of ~fish~ this implementation is far more trivial than these prior for ~bash~.

* Install

Tested instructions are still t.b.d. but the goal is: 

#+begin_example
  fisher add brettviren/fishql
#+end_example

Barring that, put the functions in your ~fish_functions_path~ and arrange to call:

#+begin_src fish
  fishql-session
#+end_src

In your ~config.fish~.

* Configuration

None required as per fish design principles.

That said, you can define the DB name

#+begin_example
  set fishql_db mydb
#+end_example

This will get translated to a file name.  Setting it will also start a new ~fishql~ session.

The heavy lifting is done with the ~sqlite3~ program located in $PATH.  A different program may be used:

#+begin_example
  set fishql_dbprog /path/to/your/sqlite
#+end_example

* Usage

By default, there's nothing to do.  Execute commands as normal and meta data about their running will fill up the DB.

Raw SQL may be executed with ~fishql-query~

#+begin_example
  echo "select c.command from commands as c order by c.start_time limit 10" | fishql-query
#+end_example

Of course, that is a bit tedious.  Like ~shist~ and ~ash~, ~fishql~ supports "canned queries".  Or will, once they are implemented.

* Security

The Sqlite3 DB file is local to your account so should be considered as secure as any shell history.  However, more information is recorded than most shells collect.  If you have concerns, check the table schema defined in ~fishql-initdb~.
