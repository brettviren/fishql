#+title: ~fishql~ - Fish History Query Language DB

* Overview

~fishql~ is a ~fish~ shell plugin to hold history in an Sqlite3 DB file.

~fishql~ is a port to ~fish~ of a previous implementation in Bash ([[https://github.com/brettviren/shist][shist]]) which itself is a clone of [[https://github.com/barabo/advanced-shell-history][ash]].  As such the ~fishql~ DB schema is compatible and in principle can interoperate with these prior works.  

Because of the all the useful facilities of ~fish~ (events, built in command timing) this implementation is rather trivial.

* Install

FIXME: still t.b.d. but the goal is:

#+begin_example
  fisher add brettviren/fishql
#+end_example

Until then, clone somewhere and

#+begin_src fish
  source /path/to/fishql/config.fish
  set fishql_db mydb
#+end_src

* Configuration

You may set the DB name.

#+begin_example
  set fishql_db mydb
#+end_example

This will get translated to an Sqlite3 file name that is available in ~$fishql_dbfile~.  Setting a new DB name will start a new ~fishql~ session.

The heavy lifting is done with the ~sqlite3~ program which by default is located in ~$PATH~.  A specific program may be made explicit:

#+begin_example
  set fishql_dbprog /path/to/your/sqlite
#+end_example

* Usage

Nominally, it runs unnoticed, quietly filling up its database.

A raw SQL may be executed with with ~sqlite3~ or the provided wrapper ~fishql-query~.  For example, see the last 10 command entries:

#+begin_example
  echo "select c.command from commands as c order by -c.start_time limit 10" | fishql-query
#+end_example

Of course, raw SQL is a rather tedious to type.  Like ~shist~ and ~ash~, ~fishql~ supports definition and use of "canned queries".  A canned query simply hides away some SQL in a function so it may be invoked as a simple command like:

#+begin_example
  fishql-<name>
#+end_example

Some queries are written to load the results into ~fzf~ to allow selection and output of a part (usually the command) while others may dump the results.  

For the former, if you wish to immediately execute the selected command you may of course do:

#+begin_example
eval (fishql-<name>)
#+end_example

If, while viewing the results in ~fzf~ you wanna bail simply hit ~C-c~.

Some included canned queries are included:

- ~fish-here~ :: print the ~fzf~-selected command from those run from the current shell session
- ~fish-now~ :: print the ~fzf~-selected command from those run from the current working directory
- ~fish-ago <date> [<prec>]~ :: print commands and their times which were run within ~<prec>~ days of the given ~<date>~

* Security

The Sqlite3 DB file is local to your account.  Upon initialization it is made readable/writable only to your user.  Thus it may be considered as secure as any shell history files.  However, rather more information is recorded than most shells collect.  In addition to the command line itself and a time stamp, info about the current TTY, UID, SSH session, return code and other items are recorded.  Check the table schema defined in ~fishql-initdb~ for the full story.  Of course, it's up to you to accept any risk.

* License

You can use ~fishql~ under the the terms given in the file [[file:COPYING][COPYING]].

